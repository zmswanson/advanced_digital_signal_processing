/*
 *  Copyright 2010 by Texas Instruments Incorporated.
 *  All rights reserved. Property of Texas Instruments Incorporated.
 *  Restricted rights to use, duplicate or disclose this code are
 *  granted through contract.
 *
 */
/*
 *  ======== hello.tcf ========
 *  Configuration script used to generate the example's configuration files
 */

utils.loadPlatform("ti.platforms.ezdsp5535");

bios.enableRealTimeAnalysis(prog);
bios.enableMemoryHeaps(prog);
bios.enableRtdx(prog);
bios.enableTskManager(prog);

/*
 * Enable heaps in DARAM and define label SEG0 for heap usage.
 */

bios.DARAM.createHeap      = true;
bios.DARAM.enableHeapLabel = true;
bios.DARAM["heapLabel"]    = prog.extern("SEG0");
bios.DARAM.heapSize        = 0x500;
bios.MEM.BIOSOBJSEG = prog.get("DARAM");
bios.MEM.MALLOCSEG = prog.get("DARAM");


/*
 *  Define the GBL memory model 
 */

bios.GBL.MEMORYMODEL = "LARGE";

/*
 * Create and initialize a LOG object
 */

var trace;
trace         = bios.LOG.create("trace");
trace.bufLen  = 1024;
trace.logType = "circular";

/*
 * Set the buffer length of LOG_system buffer
 */

bios.LOG_system.bufLen = 512;

bios.HWI.instance("HWI_INT15").useDispatcher = 1;
bios.HWI.instance("HWI_INT15").interruptMask0 = "none";
bios.HWI.instance("HWI_INT15").interruptMask1 = "none";
bios.HWI.instance("HWI_INT15").fxn = prog.extern("HWI_I2S_Rx");
bios.HWI.instance("HWI_INT14").fxn = prog.extern("HWI_I2S_Tx");
bios.HWI.instance("HWI_INT14").useDispatcher = 1;
bios.HWI.instance("HWI_INT14").interruptMask0 = "none";
bios.HWI.instance("HWI_INT14").interruptMask1 = "none";
bios.HWI.instance("HWI_INT14").fxn = prog.extern("HWI_I2S_Tx", "asm");
bios.HWI.instance("HWI_INT14").fxn = prog.extern("HWI_I2S_Tx");
bios.SWI.create("SWIPing");
bios.SWI.instance("SWIPing").order = 1;
bios.SWI.instance("SWIPing").comment = "this SWI will process ping samples";
bios.SWI.instance("SWIPing").fxn = prog.extern("SWIPingFunc");
bios.SWI.instance("SWIPing").priority = 7;
bios.SWI.create("SWIPong");
bios.SWI.instance("SWIPong").order = 2;
bios.SWI.instance("SWIPong").priority = 7;
bios.SWI.instance("SWIPong").fxn = prog.extern("SWIPongFunc");
bios.PRD.create("PRD0");
bios.PRD.instance("PRD0").order = 1;
bios.PRD.instance("PRD0").period = 500;
bios.PRD.instance("PRD0").fxn = prog.extern("PRD_myPeriodicFunc");
bios.MBX.create("MBX0");
bios.MBX.instance("MBX0").messageSize = 48;
bios.MBX.instance("MBX0").length = 2;
bios.TSK.create("TSKDisplay");
bios.TSK.instance("TSKDisplay").order = 1;
bios.TSK.instance("TSKDisplay").fxn = prog.extern("TSKDisplayFunc");
bios.TSK.instance("TSKDisplay").priority = 7;
bios.IDL.create("IDL0");
bios.IDL.instance("IDL0").order = 1;
bios.IDL.instance("IDL0").comment = "Monitor SW1 and SW2 presses";
bios.IDL.instance("IDL0").fxn = prog.extern("monitorSwitches");
bios.IDL.instance("IDL0").calibration = 0;
bios.PRD.instance("PRD0").destroy();
bios.TSK.instance("TSK_idle").order = 1;
bios.TSK.instance("TSKDisplay").destroy();
bios.MBX.instance("MBX0").destroy();
bios.IDL.instance("LNK_dataPump").order = 1;
bios.IDL.instance("RTA_dispatcher").order = 2;
bios.IDL.instance("IDL_cpuLoad").order = 3;
bios.IDL.instance("PWRM_idleDomains").order = 4;
bios.IDL.instance("IDL0").destroy();
bios.IDL.create("IDL0");
bios.IDL.instance("IDL0").order = 7;
bios.IDL.instance("IDL0").comment = "Monitor SW1 and SW2 presses";
bios.IDL.instance("IDL0").fxn = prog.extern("monitorSwitches");
bios.IDL.instance("IDL0").calibration = 0;
bios.IDL.instance("IDL0").comment = "Monitor SW2 presses";
bios.IDL.instance("IDL0").fxn = prog.extern("monitorSW2");
bios.IDL.instance("IDL0").order = 5;
bios.IDL.create("IDL1");
bios.IDL.instance("IDL1").order = 7;
bios.IDL.instance("IDL1").fxn = prog.extern("monitorSW1");
bios.IDL.instance("IDL1").calibration = 0;
bios.SWI.instance("PRD_swi").order = 1;
bios.SWI.instance("KNL_swi").order = 2;
bios.SWI.instance("SWIPong").order = 3;
bios.SWI.instance("SWIPing").destroy();
bios.SWI.instance("SWIPong").destroy();
bios.TSK.create("TSK0");
bios.TSK.instance("TSK0").order = 2;
bios.TSK.create("TSK1");
bios.TSK.instance("TSK1").order = 3;
bios.TSK.instance("TSK0").fxn = prog.extern("TSKPingFunc");
bios.TSK.instance("TSK0").priority = 7;
bios.TSK.instance("TSK1").fxn = prog.extern("TSKPongFunc");
bios.TSK.instance("TSK1").priority = 7;
bios.MBX.create("MBXAudio");
bios.MBX.create("MBXDisplay");
bios.MBX.instance("MBXAudio").messageSize = 48;
bios.MBX.instance("MBXAudio").length = 2;
bios.TSK.instance("TSK1").order = 2;
bios.TSK.instance("TSK0").destroy();
bios.TSK.create("TSKPing");
bios.TSK.instance("TSKPing").order = 4;
bios.TSK.instance("TSKPing").priority = 7;
bios.TSK.instance("TSKPing").fxn = prog.extern("TSKPingFunc");
bios.TSK.instance("TSKPing").order = 2;
bios.TSK.instance("TSK1").destroy();
bios.TSK.create("TSKPong");
bios.TSK.instance("TSKPong").order = 4;
bios.TSK.instance("TSKPong").priority = 7;
bios.TSK.instance("TSKPong").fxn = prog.extern("TSKPongFunc");
bios.TSK.instance("TSKPong").priority = 8;
bios.TSK.instance("TSKPing").priority = 8;
bios.TSK.instance("TSKPong").priority = 7;
bios.TSK.instance("TSKPong").order = 3;
bios.TSK.instance("TSKPong").destroy();
bios.TSK.create("TSKDecimate");
bios.TSK.instance("TSKDecimate").order = 4;
bios.TSK.instance("TSKDecimate").priority = 7;
bios.TSK.instance("TSKDecimate").fxn = prog.extern("TSKPongFunc");
bios.TSK.instance("TSKDecimate").fxn = prog.extern("TSKDecimateFunc");
bios.TSK.instance("TSKDecimate").order = 2;
bios.TSK.instance("TSKPing").destroy();
bios.TSK.create("TSKPingPong");
bios.TSK.instance("TSKPingPong").order = 4;
bios.TSK.instance("TSKPingPong").priority = 8;
bios.TSK.instance("TSKPingPong").fxn = prog.extern("TSKPingFunc");
bios.TSK.instance("TSKPingPong").fxn = prog.extern("TSKPingPongFunc");
bios.MBX.instance("MBXDisplay").messageSize = 576;
bios.MBX.instance("MBXDisplay").destroy();
bios.MBX.create("MBXDecimate");
bios.MBX.instance("MBXDecimate").messageSize = 576;
bios.MBX.create("MBXDisplay");
bios.MBX.instance("MBXDisplay").messageSize = 96;
bios.MBX.instance("MBXDisplay").destroy();
// !GRAPHICAL_CONFIG_TOOL_SCRIPT_INSERT_POINT!

if (config.hasReportedError == false) {
    prog.gen();
}
